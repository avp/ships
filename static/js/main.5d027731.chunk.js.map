{"version":3,"sources":["Geometry.tsx","Grid.tsx","GridView.tsx","ShipView.tsx","Fleet.tsx","Setup.tsx","Player.ts","Game.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Dir","applyDir","dir","r","c","Across","Down","HoverState","Result","Grid","grid","this","row","push","Cell","hover","None","ship","size","points","result","i","p","enter","isValidPlacement","valid","state","Valid","Invalid","pos","fleet","ships","Math","floor","random","placeShip","attempt","GridView","onMouseEnter","onMouseLeave","onClick","hideFleet","cells","ch","className","key","cell","kind","join","onMouseOver","onMouseOut","ShipView","selected","dimIfPlaced","dimOnSunk","isSunk","kinds","destroyer","name","submarine","cruiser","battleship","carrier","Ship","Fleet","Setup","onSetup","useState","forcer","setForcer","setFleet","setGrid","mouseLoc","setMouseLoc","setDir","activeShip","setActiveShip","handleHover","handlePlacementHover","playGame","SetupFleet","activated","onKeyPress","e","clearHover","newDir","preventDefault","stopPropagation","newFleet","randomize","every","s","props","tabIndex","Player","Human","Computer","Game","onComplete","computer","human","turn","setTurn","winner","setWinner","changePlayer","player","entered","GameFleet","setTimeout","makeMove","App","inside","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d027731.chunk.js","sourcesContent":["// @format\n\nexport type Point = [number, number];\n\nexport enum Dir {\n  Across,\n  Down,\n}\n\nexport function applyDir([r, c]: [number, number], dir: Dir): [number, number] {\n  switch (dir) {\n    case Dir.Across:\n      return [r, c + 1];\n    case Dir.Down:\n      return [r + 1, c];\n  }\n}\n","// @format\n\nimport { applyDir, Dir, Point } from './Geometry';\nimport { Fleet, Ship } from './Fleet';\n\nexport const GRID_SIZE = 10;\n\nexport enum HoverState {\n  None,\n  Valid,\n  Invalid,\n}\n\nenum Result {\n  Hit,\n  Miss,\n}\n\ninterface Attempt {\n  p: Point;\n  result: Result;\n}\n\n\nexport class Grid {\n  grid: Array<Array<Cell>>;\n\n  constructor() {\n    this.grid = [];\n    for (let r = 0; r < GRID_SIZE; ++r) {\n      let row = [];\n      for (let c = 0; c < GRID_SIZE; ++c) {\n        row.push(new Cell());\n      }\n      this.grid.push(row);\n    }\n  }\n\n  static randomize(fleet: Fleet): Grid {\n    const grid = new Grid();\n\n    for (const ship of fleet.ships) {\n      while (!ship.pos) {\n        const r = Math.floor(Math.random() * GRID_SIZE);\n        const c = Math.floor(Math.random() * GRID_SIZE);\n        const dir = Math.random() < 0.5 ? Dir.Across : Dir.Down;\n        const pos: Point = [r, c];\n        if (grid.isValidPlacement(pos, ship, dir)) {\n          grid.placeShip(pos, ship, dir);\n        }\n      }\n    }\n\n    return grid;\n  }\n\n  clearHover(): void {\n    for (const r of this.grid) {\n      for (const c of r) {\n        c.hover = HoverState.None;\n      }\n    }\n  }\n\n  isValidPlacement(\n    [r, c]: Point,\n    ship: Ship,\n    dir: Dir\n  ): [boolean, Array<Point>] {\n    const size = ship.size();\n    const points: Array<Point> = [];\n    let result = true;\n    for (let i = 0; i < size; ++i) {\n      if (r >= GRID_SIZE || c >= GRID_SIZE) {\n        return [false, points];\n      }\n      points.push([r, c]);\n      if (this.grid[r][c].ship) {\n        result = false;\n      }\n      [r, c] = applyDir([r, c], dir);\n    }\n    return [result, points];\n  }\n\n  handlePlacementHover(p: Point, enter: boolean, ship: Ship, dir: Dir): void {\n    let [valid, points] = this.isValidPlacement(p, ship, dir);\n    let state = valid ? HoverState.Valid : HoverState.Invalid;\n    for (const [r, c] of points) {\n      this.grid[r][c].hover = enter ? state : HoverState.None;\n    }\n  }\n\n  placeShip(p: Point, ship: Ship, dir: Dir): boolean {\n    let [valid, points] = this.isValidPlacement(p, ship, dir);\n    if (!valid) {\n      return false;\n    }\n\n    for (const [r, c] of points) {\n      this.grid[r][c].ship = ship;\n    }\n    ship.dir = dir;\n    ship.pos = p;\n\n    return true;\n  }\n}\n\nexport class Cell {\n  hover: HoverState;\n  ship: Ship | null;\n  attempt: boolean;\n\n  constructor() {\n    this.hover = HoverState.None;\n    this.ship = null;\n    this.attempt = false;\n  }\n}\n","// @format\n\nimport React from 'react';\nimport './Grid.css';\nimport { Fleet } from './Fleet';\nimport { GRID_SIZE, HoverState, Grid } from './Grid';\n\nexport interface Props {\n  fleet: Fleet;\n  grid: Grid;\n  hideFleet?: boolean;\n  onMouseEnter?: (r: number, c: number) => void;\n  onMouseLeave?: (r: number, c: number) => void;\n  onClick?: (r: number, c: number) => void;\n}\n\n/// Displays the given fleet on a grid.\nexport function GridView({\n  grid,\n  onMouseEnter,\n  onMouseLeave,\n  onClick,\n  hideFleet,\n}: Props) {\n  const cells = [];\n  for (const ch of ' ABCDEFGHIJ') {\n    cells.push(\n      <div className={'GridElement CellLabel'} key={ch}>\n        <div className={'content'}>{ch}</div>\n      </div>\n    );\n  }\n\n  let key = 0;\n  for (let r = 0; r < GRID_SIZE; ++r) {\n    // const cells = [];\n    cells.push(\n      <div className={'GridElement CellLabel'} key={-1 * r}>\n        <div className={'content'}>{r + 1}</div>\n      </div>\n    );\n    for (let c = 0; c < GRID_SIZE; ++c) {\n      let className = ['Cell'];\n      switch (grid.grid[r][c].hover) {\n        case HoverState.None:\n          className.push('HoverNone');\n          break;\n        case HoverState.Valid:\n          className.push('HoverValid');\n          break;\n        case HoverState.Invalid:\n          className.push('HoverInvalid');\n          break;\n      }\n      const cell = grid.grid[r][c];\n      const ship = cell.ship;\n      if (ship && !hideFleet) {\n        className.push(ship.kind.className);\n      }\n      const attempt = (\n        <div\n          className={`Attempt ${\n            cell.attempt ? (cell.ship ? 'AttemptHit' : 'AttemptMiss') : ''\n          }`}\n        ></div>\n      );\n      cells.push(\n        <div\n          key={++key}\n          className={className.join(' ') + ' GridElement'}\n          onMouseOver={() => onMouseEnter?.(r, c)}\n          onMouseOut={() => onMouseLeave?.(r, c)}\n          onClick={() => onClick?.(r, c)}\n        >\n          {attempt}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className={'GridContainer'}>\n      <div className={'Grid'}>{cells}</div>\n    </div>\n  );\n}\n","// @format\n\nimport React from 'react';\nimport './Ship.css';\nimport { Ship } from './Fleet';\nimport { Grid } from './Grid';\n\ninterface Props {\n  selected: boolean;\n  ship: Ship;\n  onClick?(activated: boolean, ship: Ship): void;\n  dimIfPlaced?: boolean;\n  dimOnSunk?: Grid;\n}\n\nexport function ShipView({\n  selected,\n  ship,\n  onClick,\n  dimIfPlaced,\n  dimOnSunk,\n}: Props) {\n  const size: number = ship.kind.size;\n\n  const className = ['Ship'];\n  className.push(selected ? 'ShipSelected' : 'ShipUnselected');\n  if (dimIfPlaced && ship.pos) {\n    className.push('ShipDimmed');\n  }\n  if (dimOnSunk && ship.isSunk(dimOnSunk)) {\n    className.push('ShipSunk');\n  }\n\n  const cells = [];\n  for (let i = 0; i < size; ++i) {\n    cells.push(\n      <div key={i} className={`GridElement ${ship.kind.className}`} />\n    );\n  }\n\n  return (\n    <div\n      className={className.join(' ')}\n      onClick={() => onClick?.(!selected, ship)}\n    >\n      {cells}\n    </div>\n  );\n}\n","// @format\n\nimport { Dir, applyDir } from './Geometry';\nimport { Grid } from './Grid';\n\ninterface Kind {\n  name: string;\n  className: string;\n  size: number;\n}\n\nconst kinds: Record<string, Kind> = {\n  destroyer: {\n    name: 'Destroyer',\n    className: 'Destroyer',\n    size: 2,\n  },\n  submarine: {\n    name: 'Submarine',\n    className: 'Submarine',\n    size: 3,\n  },\n  cruiser: {\n    name: 'Cruiser',\n    className: 'Cruiser',\n    size: 3,\n  },\n  battleship: {\n    name: 'Battleship',\n    className: 'Battleship',\n    size: 4,\n  },\n  carrier: {\n    name: 'Aircraft Carrier',\n    className: 'Carrier',\n    size: 5,\n  },\n};\n\nexport class Ship {\n  kind: Kind;\n  pos: [number, number] | null;\n  dir: Dir;\n\n  constructor(kind: string) {\n    this.kind = kinds[kind];\n    this.pos = null;\n    this.dir = Dir.Across;\n    return this;\n  }\n\n  size(): number {\n    return this.kind.size;\n  }\n\n  isSunk(grid: Grid): boolean {\n    if (!this.pos) {\n      return false;\n    }\n    let [r, c] = this.pos;\n    for (let i = 0; i < this.size(); ++i) {\n      if (!grid.grid[r][c].attempt) {\n        return false;\n      }\n      [r, c] = applyDir([r, c], this.dir);\n    }\n    return true;\n  }\n}\n\nexport class Fleet {\n  ships: Array<Ship>;\n\n  constructor() {\n    this.ships = [\n      new Ship('destroyer'),\n      new Ship('submarine'),\n      new Ship('cruiser'),\n      new Ship('battleship'),\n      new Ship('carrier'),\n    ];\n    return this;\n  }\n}\n","// @format\n\nimport React, { useState } from 'react';\nimport './Setup.css';\nimport { GridView } from './GridView';\nimport { ShipView } from './ShipView';\n\nimport { Fleet, Ship } from './Fleet';\nimport { Grid } from './Grid';\nimport { Dir, Point } from './Geometry';\n\ninterface Props {\n  onSetup(grid: Grid, fleet: Fleet): void;\n}\n\n/**\n * Handles setup of the ships on a grid for the player.\n * Pass the onSetup() hook in order to get the grid and fleet which will\n * be used for playing the actual game.\n */\nexport function Setup({ onSetup }: Props) {\n  // Use this to force updates without shallow copying things like `grid`,\n  // when necessary.\n  // Can't find a React hooks way to force a reconciliation without this hack.\n  const [forcer, setForcer] = useState(0);\n  const [fleet, setFleet] = useState(() => new Fleet());\n  const [grid, setGrid] = useState(() => new Grid());\n  const [mouseLoc, setMouseLoc] = useState<[number, number] | null>(null);\n  const [dir, setDir] = useState(Dir.Across);\n  const [activeShip, setActiveShip] = useState<Ship | null>(null);\n\n  // Activate/Deactivate a ship on clicking it.\n  const clickShip = (activated: boolean, ship: Ship) => {\n    if (ship.pos) {\n      return;\n    }\n    if (activated) {\n      setActiveShip(ship);\n    } else {\n      setActiveShip(null);\n    }\n  };\n\n  // Place activeShip at position p in direction `dir`.\n  const placeShip = (p: Point): void => {\n    if (!activeShip) {\n      return;\n    }\n    const placed = grid.placeShip(p, activeShip, dir);\n    if (!placed) {\n      return;\n    }\n    setActiveShip(null);\n  };\n\n  const handleHover = (r: number, c: number, enter: boolean): void => {\n    if (!activeShip) {\n      return;\n    }\n    if (enter) {\n      setMouseLoc([r, c]);\n    } else {\n      setMouseLoc(null);\n    }\n    grid.handlePlacementHover([r, c], enter, activeShip, dir);\n    // setGrid(grid) doesn't actually do anything because `grid` hasn't changed.\n    // Use the forcer to circumvent that.\n    setForcer(1 - forcer);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (e.key === 'r') {\n      grid.clearHover();\n      const newDir = dir === Dir.Across ? Dir.Down : Dir.Across;\n      if (mouseLoc && activeShip) {\n        grid.handlePlacementHover(mouseLoc, true, activeShip, newDir);\n      }\n      setDir(newDir);\n    }\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const reset = (): void => {\n    setGrid(new Grid());\n    setFleet(new Fleet());\n  };\n\n  const randomize = (): void => {\n    const newFleet = new Fleet();\n    setFleet(newFleet);\n    setGrid(Grid.randomize(newFleet));\n  };\n\n  const playGame = (): void => {\n    onSetup(grid, fleet);\n  };\n\n  const renderPlayButton = () => {\n    if (fleet.ships.every((s) => s.pos)) {\n      return (\n        <button className=\"btn\" onClick={playGame}>\n          Play!\n        </button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <h2>Ship Placement</h2>\n      <p>\n        Click on a ship to select it, then put it on the grid.\n        Press <code>r</code> to rotate.\n      </p>\n      <p>\n        Or, just click the \"Randomize\" button!\n      </p>\n      <div className={'SetupContainer'}>\n        <div className={'SetupGrid'}>\n          <GridView\n            fleet={fleet}\n            grid={grid}\n            onMouseEnter={(r: number, c: number) => handleHover(r, c, true)}\n            onMouseLeave={(r: number, c: number) => handleHover(r, c, false)}\n            onClick={(r: number, c: number) => placeShip([r, c])}\n          ></GridView>\n        </div>\n        <SetupFleet\n          fleet={fleet}\n          onClick={clickShip}\n          activeShip={activeShip}\n          onKeyPress={handleKeyPress}\n        />\n      </div>\n      <div className={'SetupButtons'}>\n        <div>\n          <button className=\"btn\" onClick={reset}>\n            Reset\n          </button>\n          <button className=\"btn\" onClick={randomize}>\n            Randomize\n          </button>\n        </div>\n        <div>{renderPlayButton()}</div>\n      </div>\n    </div>\n  );\n}\n\ninterface SetupFleetProps {\n  fleet: Fleet;\n  activeShip: Ship | null;\n  onClick(activated: boolean, ship: Ship): void;\n  onKeyPress(e: React.KeyboardEvent<HTMLDivElement>): void;\n}\n\nfunction SetupFleet(props: SetupFleetProps) {\n  const ships = [];\n  for (const ship of props.fleet.ships) {\n    ships.push(\n      <ShipView\n        selected={ship === props.activeShip}\n        key={ship.kind.name}\n        ship={ship}\n        onClick={props.onClick}\n        dimIfPlaced={true}\n      />\n    );\n  }\n  return (\n    <div\n      className={'SetupFleet'}\n      onKeyPress={(e) => props.onKeyPress(e)}\n      tabIndex={-1}\n    >\n      {ships}\n    </div>\n  );\n}\n","// @format\n\nimport { Grid, GRID_SIZE } from './Grid';\nimport { Point } from './Geometry';\nimport { Fleet } from './Fleet';\n\nexport class Player {\n  grid: Grid;\n  fleet: Fleet;\n\n  constructor(grid: Grid, fleet: Fleet) {\n    this.grid = grid;\n    this.fleet = fleet;\n  }\n}\n\nexport class Human extends Player {}\n\nexport class Computer extends Player {\n  constructor() {\n    const fleet = new Fleet();\n    const grid = Grid.randomize(fleet);\n    super(grid, fleet);\n  }\n\n  makeMove(grid: Grid): Point {\n    while (true) {\n      const r = Math.floor(Math.random() * GRID_SIZE);\n      const c = Math.floor(Math.random() * GRID_SIZE);\n      if (!grid.grid[r][c].attempt) {\n        grid.grid[r][c].attempt = true;\n        return [r, c];\n      }\n    }\n  }\n}\n","// @format\n\nimport React, { useState } from 'react';\nimport './Game.css';\nimport { GridView } from './GridView';\nimport { ShipView } from './ShipView';\n\nimport { HoverState, Grid } from './Grid';\nimport { Point } from './Geometry';\nimport { Fleet } from './Fleet';\nimport { Player, Human, Computer } from './Player';\n\ninterface Props {\n  grid: Grid;\n  fleet: Fleet;\n  onComplete(): void;\n}\n\nexport function Game({ grid, fleet, onComplete }: Props) {\n  const [forcer, setForcer] = useState(0);\n  let [computer] = useState(() => new Computer());\n  let [human] = useState(() => new Human(grid, fleet));\n  let [turn, setTurn] = useState<Player | null>(human);\n  let [winner, setWinner] = useState<Player | null>(null);\n\n  const renderTurn = () => {\n    if (winner) {\n      return winner === human ? 'You win!' : 'Computer wins';\n    }\n    if (turn === human) {\n      return 'Your turn';\n    }\n    if (turn === computer) {\n      return 'Computer is thinking...';\n    }\n  };\n\n  const changePlayer = (player: Player) => {\n    if (human.fleet.ships.every((s) => s.isSunk(human.grid))) {\n      setWinner(computer);\n      setTurn(null);\n      return;\n    }\n\n    if (computer.fleet.ships.every((s) => s.isSunk(computer.grid))) {\n      setWinner(human);\n      setTurn(null);\n      return;\n    }\n\n    setTurn(player);\n  };\n\n  const handleHover = (grid: Grid, [r, c]: Point, entered: boolean) => {\n    if (turn !== human) {\n      return;\n    }\n    if (entered && !grid.grid[r][c].attempt) {\n      grid.grid[r][c].hover = HoverState.Valid;\n    } else {\n      grid.grid[r][c].hover = HoverState.None;\n    }\n    setForcer(1 - forcer);\n  };\n\n  const makeMove = (grid: Grid, [r, c]: Point) => {\n    if (turn !== human) {\n      return;\n    }\n    const cell = grid.grid[r][c];\n    if (cell.attempt) {\n      return;\n    }\n    cell.attempt = true;\n    cell.hover = HoverState.None;\n    changePlayer(computer);\n    setTimeout(() => {\n      computer.makeMove(human.grid);\n      changePlayer(human);\n    }, 100);\n  };\n\n  return (\n    <div className=\"Game\">\n      <h2>{renderTurn()}</h2>\n      <div className=\"GameContainer\">\n        <div className=\"GamePlayer GameHuman\">\n          <h3 className=\"GamePlayerHeader\">You</h3>\n          <GameFleet fleet={human.fleet} grid={human.grid}></GameFleet>\n          <GridView fleet={human.fleet} grid={human.grid}></GridView>\n        </div>\n        <div className=\"GamePlayer GameComputer\">\n          <h3 className=\"GamePlayerHeader\">Computer</h3>\n          <GridView\n            fleet={computer.fleet}\n            grid={computer.grid}\n            onMouseEnter={(r, c) => handleHover(computer.grid, [r, c], true)}\n            onMouseLeave={(r, c) => handleHover(computer.grid, [r, c], false)}\n            onClick={(r, c) => makeMove(computer.grid, [r, c])}\n            hideFleet={!winner}\n          ></GridView>\n          <GameFleet fleet={computer.fleet} grid={computer.grid}></GameFleet>\n        </div>\n      </div>\n      <div className={'GameButtons'}>\n        <button className={'btn'} onClick={onComplete}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\ninterface GameFleetProps {\n  fleet: Fleet;\n  grid: Grid;\n}\n\nfunction GameFleet(props: GameFleetProps) {\n  const ships = [];\n  for (const ship of props.fleet.ships) {\n    ships.push(\n      <ShipView\n        selected={false}\n        key={ship.kind.name}\n        ship={ship}\n        dimOnSunk={props.grid}\n      />\n    );\n  }\n  return <div className={'GameFleet'}>{ships}</div>;\n}\n","// @format\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Setup } from './Setup';\nimport { Game } from './Game';\nimport { Grid } from './Grid';\nimport { Fleet } from './Fleet';\n\nexport default function App() {\n  const [grid, setGrid] = useState<Grid | null>(null);\n  const [fleet, setFleet] = useState<Fleet | null>(null);\n\n  const completeSetup = (grid: Grid, fleet: Fleet) => {\n    setGrid(grid);\n    setFleet(fleet);\n  };\n\n  const reset = () => {\n    setGrid(null);\n    setFleet(null);\n  }\n\n  let inside;\n  if (grid && fleet) {\n    inside = <Game grid={grid} fleet={fleet} onComplete={reset} />;\n  } else {\n    inside = <Setup onSetup={completeSetup} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>SHIPS IN A GRID</h1>\n      {inside}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}